// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -destination=mocks/mock_client.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockClient) Count(metric string, labels map[string]string, rate float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", metric, labels, rate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockClientMockRecorder) Count(metric, labels, rate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockClient)(nil).Count), metric, labels, rate)
}

// Gauge mocks base method.
func (m *MockClient) Gauge(metric string, value float64, labels map[string]string, rate float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gauge", metric, value, labels, rate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Gauge indicates an expected call of Gauge.
func (mr *MockClientMockRecorder) Gauge(metric, value, labels, rate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gauge", reflect.TypeOf((*MockClient)(nil).Gauge), metric, value, labels, rate)
}

// Histogram mocks base method.
func (m *MockClient) Histogram(metric string, value float64, labels map[string]string, rate float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Histogram", metric, value, labels, rate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Histogram indicates an expected call of Histogram.
func (mr *MockClientMockRecorder) Histogram(metric, value, labels, rate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Histogram", reflect.TypeOf((*MockClient)(nil).Histogram), metric, value, labels, rate)
}

// Summary mocks base method.
func (m *MockClient) Summary(metric string, value float64, labels map[string]string, rate float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Summary", metric, value, labels, rate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Summary indicates an expected call of Summary.
func (mr *MockClientMockRecorder) Summary(metric, value, labels, rate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Summary", reflect.TypeOf((*MockClient)(nil).Summary), metric, value, labels, rate)
}
